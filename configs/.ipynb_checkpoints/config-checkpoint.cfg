# Performance/Efficiency md Quality lg config from spacy.io
[paths]
train = "corpus/train.spacy"
dev = "corpus/dev.spacy"
raw = null
init_tok2vec = null
vectors = "training/custom_model_lg"

# custom_model_md custom_model_lg

[variables]
wandb_project_name = "NER-prodigy-logWandB"

[system]
gpu_allocator = null
seed = 0

[nlp]
lang = "en"
pipeline = ["tok2vec","ner","entity_ruler"]
tokenizer = {"@tokenizers":"spacy.Tokenizer.v1"}
before_creation = null
after_creation = null
after_pipeline_creation = null
disabled = []
batch_size = 1000

[components]

[components.entity_ruler]
#source = "training/custom_model_md"
factory = "entity_ruler"
ent_id_sep = "||"
overwrite_ents = false
phrase_matcher_attr = null
validate = false

[components.ner]
source = "training/custom_model_lg"

# custom_model_md custom_model_lg

# factory = "ner"
# incorrect_spans_key = null
# moves = null
# update_with_oracle_cut_size = 100

# [components.ner.model]
# @architectures = "spacy.TransitionBasedParser.v2"
# state_type = "ner"
# extra_state_tokens = false
# hidden_width = 64
# maxout_pieces = 2
# use_upper = true
# nO = null

# [components.ner.model.tok2vec]
# @architectures = "spacy.Tok2VecListener.v1"
# width = ${components.tok2vec.model.encode.width}
# upstream = "*"

[components.tok2vec]
# source = "training/custom_model_lg"
factory = "tok2vec"

[components.tok2vec.model]
@architectures = "spacy.Tok2Vec.v1"

[components.tok2vec.model.embed]
@architectures = "spacy.MultiHashEmbed.v1"
width = ${components.tok2vec.model.encode.width}
rows = [2000,1000,1000,1000]
attrs = ["NORM","PREFIX","SUFFIX","SHAPE"]
include_static_vectors = false

[components.tok2vec.model.encode]
@architectures = "spacy.MaxoutWindowEncoder.v1"
width = 96
depth = 4
window_size = 1
maxout_pieces = 3

[corpora]

[corpora.dev]
@readers = "spacy.Corpus.v1"
path = ${paths.dev}
max_length = 0
gold_preproc = false
limit = 0
augmenter = null

[corpora.train]
@readers = "spacy.Corpus.v1"
path = ${paths.train}
max_length = 2000
gold_preproc = false
limit = 0
augmenter = null

[training]
train_corpus = "corpora.train"
dev_corpus = "corpora.dev"
seed = ${system.seed}
gpu_allocator = ${system.gpu_allocator}
dropout = 0.1
accumulate_gradient = 1
patience = 1600
max_epochs = 0
max_steps = 20000
eval_frequency = 200
frozen_components = []
before_to_disk = null
annotating_components = []

[training.batcher]
@batchers = "spacy.batch_by_words.v1"
discard_oversize = false
tolerance = 0.2
get_length = null

[training.batcher.size]
@schedules = "compounding.v1"
start = 100
stop = 1000
compound = 1.001
t = 0.0

[training.logger]
@loggers = "spacy.WandbLogger.v2"
project_name = ${variables.wandb_project_name}
remove_config_values = []
#"paths.train", "paths.dev", "corpora.train.path", "corpora.dev.path"
model_log_interval = null
log_dataset_dir = null

[training.optimizer]
@optimizers = "Adam.v1"
beta1 = 0.9
beta2 = 0.999
L2_is_weight_decay = true
L2 = 0.01
grad_clip = 1.0
use_averages = false
eps = 0.00000001

[training.optimizer.learn_rate]
@schedules = "warmup_linear.v1"
warmup_steps = 250
total_steps = 20000
initial_rate = 0.00005

[training.score_weights]
ents_f = 1.0
ents_p = 0.0
ents_r = 0.0
ents_per_type = null

[pretraining]

[initialize]
vectors = ${paths.vectors}
init_tok2vec = ${paths.init_tok2vec}
vocab_data = null
before_init = null
after_init = null

[initialize.components]

[initialize.components.entity_ruler]

[initialize.components.entity_ruler.patterns]
@readers = "srsly.read_jsonl.v1"
path = "training/custom_model_lg/entity_ruler/patterns.jsonl"

# custom_model_md custom_model_lg

[initialize.lookups]
@misc = "spacy.LookupsDataLoader.v1"
lang = ${nlp.lang}
tables = ["lexeme_norm"]


[initialize.tokenizer]